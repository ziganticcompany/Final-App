var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

import * as React from 'react';
import { ThemeContext } from '@react-navigation/core';
import { BottomNavigation } from 'react-native-paper';
import { createTabNavigator } from 'react-navigation-tabs';

class BottomNavigationView extends React.Component {
  constructor(...args) {
    var _temp;

    return _temp = super(...args), this._getColor = ({ route }) => {
      var { descriptors } = this.props;
      var descriptor = descriptors[route.key];
      var options = descriptor.options;

      if (this.context === 'dark' && options.tabBarColorDark) {
        return options.tabBarColorDark;
      } else if (this.tabBarColorLight) {
        return options.tabBarColorLight;
      } else {
        return options.tabBarColor;
      }
    }, this._getActiveTintColor = () => {
      var {
        activeTintColor,
        activeTintColorLight,
        activeTintColorDark
      } = this.props;

      if (this.context === 'dark' && activeTintColorDark) {
        return activeTintColorDark;
      } else if (activeTintColorLight) {
        return activeTintColorLight;
      } else {
        return activeTintColor;
      }
    }, this._getInactiveTintColor = () => {
      var {
        inactiveTintColor,
        inactiveTintColorLight,
        inactiveTintColorDark
      } = this.props;

      if (this.context === 'dark' && inactiveTintColorDark) {
        return inactiveTintColorDark;
      } else if (inactiveTintColorLight) {
        return inactiveTintColorLight;
      } else {
        return inactiveTintColor;
      }
    }, this._getBarStyle = () => {
      var { barStyle, barStyleLight, barStyleDark } = this.props;

      if (this.context === 'dark' && barStyleDark) {
        return barStyleDark;
      } else if (barStyleLight) {
        return barStyleLight;
      } else {
        return barStyle;
      }
    }, this._renderIcon = ({ route, focused, color }) => {
      return this.props.renderIcon({ route, focused, tintColor: color });
    }, _temp;
  }

  _isVisible() {
    var { navigation, descriptors } = this.props;
    var { state } = navigation;
    var route = state.routes[state.index];
    var options = descriptors[route.key].options;
    return options.tabBarVisible;
  }

  render() {
    var _props = this.props,
        {
      navigation,
      // eslint-disable-next-line no-unused-vars
      descriptors
    } = _props,
        rest = _objectWithoutProperties(_props, ['navigation', 'descriptors']);

    var activeTintColor = this._getActiveTintColor();
    var inactiveTintColor = this._getInactiveTintColor();
    var barStyle = this._getBarStyle();

    var isVisible = this._isVisible();
    var extraStyle = typeof isVisible === 'boolean' ? { display: isVisible ? null : 'none' } : null;

    return React.createElement(BottomNavigation
    // Pass these for backward compaibility
    , _extends({}, rest, {
      activeColor: activeTintColor,
      inactiveColor: inactiveTintColor,
      renderIcon: this._renderIcon,
      barStyle: [barStyle, extraStyle],
      navigationState: navigation.state,
      getColor: this._getColor
    }));
  }
}

BottomNavigationView.contextType = ThemeContext;
export default createTabNavigator(BottomNavigationView);